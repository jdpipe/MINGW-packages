# Maintainer: John Pye <john.pye@anu.edu.au>

_realname=omc
pkgbase=mingw-w64-${_realname}
pkgname="${MINGW_PACKAGE_PREFIX}-${_realname}"

pkgver=1.19.0.r601.gfeac1c36ed # gets updates by pkgver() below
pkgrel=1

pkgdesc="OpenModelica Compiler"
arch=('any')
mingw_arch=('mingw64') #('mingw32' 'mingw64' 'ucrt64' 'clang64' 'clang32')
url="https://openmodelica.org/"
license=("GPLv3" "OSMC-PL")

# DEPENDENCIES

depends=("${MINGW_PACKAGE_PREFIX}-libsystre"
         "${MINGW_PACKAGE_PREFIX}-winpthreads-git"
         "${MINGW_PACKAGE_PREFIX}-gcc-libs"
         "${MINGW_PACKAGE_PREFIX}-curl"
         "${MINGW_PACKAGE_PREFIX}-libiconv"
         "${MINGW_PACKAGE_PREFIX}-openblas")

makedepends=("git" "wget" "zip" "unzip" "tar" "make" "diffutils" "patch" 
          "autoconf" "automake" "m4" "pkg-config" "libtool" "flex" "bison"
#          "${MINGW_PACKAGE_PREFIX}-toolchain"
          "${MINGW_PACKAGE_PREFIX}-curl"
          "${MINGW_PACKAGE_PREFIX}-opencl-headers"
          "${MINGW_PACKAGE_PREFIX}-openblas"
#          "${MINGW_PACKAGE_PREFIX}-clang"
          "${MINGW_PACKAGE_PREFIX}-gcc-fortran"
          "${MINGW_PACKAGE_PREFIX}-cmake"
#          "${MINGW_PACKAGE_PREFIX}-ccache"
          "${MINGW_PACKAGE_PREFIX}-binutils"
          "${MINGW_PACKAGE_PREFIX}-pkgconf"
#          "${MINGW_PACKAGE_PREFIX}-dlfcn"
          "${MINGW_PACKAGE_PREFIX}-expat"
          "${MINGW_PACKAGE_PREFIX}-readline"
# optional?
          "${MINGW_PACKAGE_PREFIX}-ncurses"
          "${MINGW_PACKAGE_PREFIX}-hdf5"
          "${MINGW_PACKAGE_PREFIX}-msmpi"
          "${MINGW_PACKAGE_PREFIX}-python"
          "${MINGW_PACKAGE_PREFIX}-python-pip"
          "${MINGW_PACKAGE_PREFIX}-python-wheel"
#          "${MINGW_PACKAGE_PREFIX}-doxygen"
# only for GUI...?          
          "${MINGW_PACKAGE_PREFIX}-OpenSceneGraph"
          "${MINGW_PACKAGE_PREFIX}-qt5"
          "${MINGW_PACKAGE_PREFIX}-qtwebkit"
# packages that we'd *like* to depend on (reuse), but don't yet
#          "${MINGW_PACKAGE_PREFIX}-gc"
#          "${MINGW_PACKAGE_PREFIX}-lpsolve"
#          "${MINGW_PACKAGE_PREFIX}-sundials" 
#          "${MINGW_PACKAGE_PREFIX}-zeromq"

          # WHAT ABOUT JAVA?
)

# checkdepends=() # maybe MSL for testing...?

optdepends=()

# RELATIONS

provides=('modelica-compiler')
conflicts=('omc') # cannot cohabit with other omc versions

# OTHER SETTINGS

#options=('strip' '!debug' 'staticlibs')
#backup=()
#install=()
#changelog=()

# SOURCES

# FIXME is there any way to reuse a source tree that we've already downloaded?
# ...would help especially if attempting to makepkg on GHA
source=("${_realname}::git+https://github.com/jdpipe/OpenModelica.git")
sha256sums=('SKIP')

pkgver() {
  cd "${_realname}"
  # remove prefix 'v'
  # remove '-dev-' from middle of version tag, if present
  # add a 'r' before number of commits
  # see https://wiki.archlinux.org/title/VCS_package_guidelines#VCS_sources
  git describe --long | sed 's/^v//;s/-dev-/-/;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd "$srcdir/${_realname}"
  git submodule update --init --recursive
}

build() {
  # use a build directory specific to this host/config, and don't reuse it
  [[ -d ${srcdir}/build-${MINGW_CHOST} ]] && rm -rf ${srcdir}/build-${MINGW_CHOST}
  mkdir -p ${srcdir}/build-${MINGW_CHOST} && cd ${srcdir}/build-${MINGW_CHOST}
  
  # but our source code is still in ${srcdir}/${_realname}...
  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  cmake \
      "$srcdir/${_realname}" \
      -Wno-dev \
      -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
      -G "MSYS Makefiles"

  cmake --build .
}

package() {
  cd "${srcdir}/build-${MINGW_CHOST}"
  DESTDIR="${pkgdir}" make install
  # clean up some stray pkgconfig files
  mv ${pkgdir}/mingw64/lib/pkgconfig/*.pc ${pkgdir}/mingw64/lib/omc/pkgconfig/
  mv ${pkgdir}/mingw64/lib/omc/pkg-config/* ${pkgdir}/mingw64/lib/omc/pkgconfig/
  rmdir ${pkgdir}/mingw64/lib/pkgconfig
  rmdir ${pkgdir}/mingw64/lib/omc/pkg-config
}

# vim:sw=2:ts=2:et:tw=80:syntax=sh
